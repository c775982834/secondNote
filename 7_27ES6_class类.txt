function Foo(name,age){
	this.name=name,
	this.age=age
}
Foo.prototype.sayHello = function(){
	console.log(this.name)
}

//es6

class Foo{
	constructor(name,age){
		this.name=name;
		this.age=age;
	}
	sayHello(){
		console.log(this.name)
	}
}
var foo= new Foo("chen",20)
foo.sayHello();

软件开发环境-开发环境、测试环境、生产环境  (上生产)

模板字符串//`${}`
var basket={
	count:'1',
	onSale:'2'
	}
$('#result').append(`
  There are <b>${basket.count}</b> items
   in your basket, <em>${basket.onSale}</em>
  are on sale!
`);



Class 的静态方法
类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，
加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。

class Foo {
  static classMethod() {
    return 'hello';
  }
}


父类的静态方法，可以被子类继承。


继承类this是没有指向的
super(name,age);  //super参数指向父类的参数

如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。

Object.getPrototypeOf方法可以用来从子类上获取父类。

Object.getPrototypeOf(ColorPoint) === Point
// true
因此，可以使用这个方法判断，一个类是否继承了另一个类。


super 关键字
super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。

第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。
这里相当于A.prototype.constructor.call(this)

作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。

第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。
super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。
这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。




























