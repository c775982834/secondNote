1：什么是闭包
闭包就是能够读取其他函数内部变量的函数。在JS中，只有函数内部的子函数才能读取局部变量，
因此可以把闭包简单理解为”定义在一个函数内部的函数”。
2：闭包的特点
1：可以读取函数内部的变量。
2：让这些变量的值始终保存在内存中。
3：闭包的原理
理解闭包，首先必须理解JS变量的作用域。变量的作用域无非就是两种：全局变量和局部变量。
JS语言的特殊之处，就在于函数内部可以直接读取全局变量。另一方面，函数外部自然无法读取函数内的局部变量。
注意：
1：函数内部声明变量的时候，一定要使用var声明。如果不用的话，你实际上声明了一个全局变量。
2：局部变量的作用域，在函数定义的时候就已经确定下来了。
出于各种原因，我们有时候需要得到函数内部的局部变量。但是正常情况下这是办不到的。
只有变通一下才能实现，那就是在函数内部再定义一个函数。外部变量不能访问内部变量，
内部变量却能访问外部变量，这正是因为JS特有的”链式作用域”结构(chain scope)，
子对象会一级一级地向上寻找所有父对象的变量。所以父对象的所有变量，对子对象都是可见的，
反之则不成立。我们只需要把子函数返回出来，我们就可以在外部读取内部变量了。
4：闭包的应用场景
1：函数作为返回值。
2：函数作为参数被传递。
5：使用闭包注意点
1：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包。
否则会造成网页性能问题，在IE中可能导致内存泄漏。解决方法就是在函数退出之前，将不使用的局部变量删除。
2：闭包会在父函数外部，改变父函数内部变量的值。所以不要随便改变父函数内部变量的值。


function foo(x){
    var num = 1;
    return function bar(y){
        console.log(x+ ++num+y);
        x.num = x.num?x.num +1:1;
    }
}
var x= new Number(1);    //new出来都是object;
var baz=foo(x);
baz(1);
baz(1);
console.log(x.num);

var jQuery=(function(){
	function html(){
		console.log(html);
	}
	function remove(){
		console.log(remove);
	}
	function addClass(){
		console.log(addClass);
	}
	return {
		html:html,
		remove:remove,
		addClass:addClass
	}
})();


//垃圾回收机制 标记清除 引用计数

//IE 内存泄漏：开辟了一块内存空间，这个空间既不能被使用，又不能被释放；




继承：
call/apply
function foo(m,n){
	console.log(m+n);
}
foo.call(null,1,2); 
foo.applay(null,[1,2]);

var obj1={
	name:"obj1",
	foo:function(){
		console.log(this.name)
	}
}

var obj2={}

obj1.foo.call(obj2);






































