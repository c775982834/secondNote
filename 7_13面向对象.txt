面向对象的三个特点：
封装、
继承、
多态：某一个操作方法，作用于不同的对象，呈现不同的结果。

数组:有序值集合
对象:无序值集合

//字面量创建对象的方式，会造成可读性，及扩展性较差，并且代码冗余。
var obj = {}
//工厂模式创建对象
function Person(name,age){
	var obj = new Object();
	obj.name=name;
	obj.age=age;
	obj.sayHello = function (){
		console.log(this.name);
	}
	return obj;
}
console.log()
instanceof //检测对象类型，是用来在运行时指出对象是否是特定类的一个实例
//工厂模式不能确定对象类型



//构造函数方式创建对象

function Person(){
	this.name = name;
	this.age = age ;
	this.sayHello = function (){
		console.log(this.name)
	}
}
function Animal(){
	this.name = name;
	this.age = age ;
	this.sayHello = function (){
		console.log(this.name)
	}
}
var person1 = new Person('john1',20)  //实例化对象
var person2 = new Person('john1',20)
console.log(person1.sayHello == person2.sayHello)//false
//构造函数的方式，缺点浪费内存。
var animal1= new Aaimal('miao1',2)
//可以明确类型



//利用原型创建对象

每一个构造函数都有一个原型对象，
每一个原型对象都有一个指向构造函数的指针，
每一个实例都有一个指向原型的内部指针。

function Person (){
	this.name=name;
}
var person1 = new Person('john');
console.log(Person.prototype,person1.__proto__)


给原型对象添加属性
function Person(){
	
}
Person.prototype.name = 'john',
Person.prototype.age = 20,
Person.prototype.sayHello = function (){
	console.log(this.name);
}
var person1 = new Person();
var preson2 = new Person();
console.log(person1.sayHello == person2.sayHello) // true
//无法传参




//利用构造函数与原型对象组合方式创建对象

function Person (){
	this.name = name;
	this.age = age;
}
Person.prototype.sayHello = function (){
	console.log(this.name);
}
var person1 = new Person('john1',20);
var person2 = new Person('john2',21);
person1.sayHello();
person2.sayHello();























